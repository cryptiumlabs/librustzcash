use zcash_primitives::jubjub::{FixedGenerators, JubjubParams};
use zcash_primitives::primitives::AssetType;
use pairing::bls12_381::Bls12;

use super::JUBJUB;

mod key_agreement;
mod key_components;
mod mmr;
mod notes;
mod signatures;

#[test]
fn sapling_generators() {
    struct SaplingGenerators {
        skb: [u8; 32],
        pkb: [u8; 32],
        npb: [u8; 32],
        wprb: [u8; 32],
        vcvb: [u8; 32],
        vcrb: [u8; 32],
    };

    // From https://github.com/zcash-hackworks/zcash-test-vectors/blob/master/sapling_generators.py
    let sapling_generators = SaplingGenerators {
        skb: [
            0xb1, 0xb4, 0x86, 0xa1, 0x23, 0x26, 0xb6, 0x14, 0x52, 0xfd, 0x24, 0xf6, 0x31, 0xd0, 0x12, 0x20, 0xf2, 0x9e, 0xf4, 0xf1, 0xcf, 0xfe, 0xde, 0x75, 0xab, 0xe0, 0x52, 0x1e, 0x9f, 0x5f, 0xbc, 0x0c
        ],
        pkb: [
            0xf8, 0xbf, 0x75, 0xc5, 0xbe, 0x96, 0x6f, 0xfe, 0x08, 0x07, 0xaf, 0xa2, 0x71, 0x9c, 0xb4, 0x36, 0xe9, 0x4d, 0x00, 0x36, 0xdd, 0xdf, 0x54, 0xc6, 0x65, 0x63, 0x90, 0xd6, 0x67, 0x0d, 0x93, 0x00
        ],
        npb: [
            0xb3, 0x1e, 0x3a, 0xe1, 0x3e, 0x4e, 0x03, 0xed, 0x0a, 0xfe, 0x6d, 0xe9, 0xae, 0x45, 0x69, 0x22, 0x9d, 0x79, 0xfe, 0x1a, 0xc3, 0x0d, 0xf7, 0xf3, 0x50, 0x40, 0x24, 0xf1, 0x0b, 0x0f, 0x26, 0x83
        ],
        wprb: [
            0xed, 0xae, 0x22, 0xee, 0xa0, 0xda, 0xb8, 0xc6, 0x64, 0x5c, 0xb8, 0x66, 0x5c, 0x29, 0x0b, 0x69, 0xf0, 0xf8, 0x7a, 0xe9, 0x97, 0x71, 0x27, 0x6d, 0x73, 0xbc, 0xd3, 0x93, 0x69, 0x92, 0xe2, 0x29
        ],
        vcvb: [
            0x32, 0x06, 0xb9, 0x3a, 0xbd, 0xa8, 0x7c, 0x55, 0xb2, 0x6e, 0x4b, 0x9a, 0x76, 0x28, 0xbc, 0x4a, 0xc6, 0xeb, 0xb0, 0x60, 0x0d, 0xd1, 0x37, 0x4b, 0x47, 0xd5, 0xab, 0x04, 0xc1, 0xb8, 0x18, 0x3c
        ],
        vcrb: [
            0xd0, 0x92, 0xe6, 0x9c, 0xe9, 0xfc, 0xe5, 0x28, 0xfe, 0x02, 0x03, 0x36, 0xaa, 0x2d, 0x4c, 0xf9, 0x50, 0x11, 0xae, 0xb8, 0xd4, 0x0c, 0x90, 0xbc, 0x0b, 0xd5, 0x20, 0xb7, 0xf9, 0x11, 0x5f, 0x55
        ],
    };

    {
        let mut vec = Vec::new();
        let p = JUBJUB.generator(FixedGenerators::SpendingKeyGenerator);
        p.write(&mut vec).unwrap();
        assert_eq!(&vec, &sapling_generators.skb);
    }

    {
        let mut vec = Vec::new();
        let p = JUBJUB.generator(FixedGenerators::ProofGenerationKey);
        p.write(&mut vec).unwrap();
        assert_eq!(&vec, &sapling_generators.pkb);
    }

    {
        let mut vec = Vec::new();
        let p = JUBJUB.generator(FixedGenerators::NullifierPosition);
        p.write(&mut vec).unwrap();
        assert_eq!(&vec, &sapling_generators.npb);
    }

    {
        let mut vec = Vec::new();
        let p = JUBJUB.generator(FixedGenerators::NoteCommitmentRandomness);
        p.write(&mut vec).unwrap();
        assert_eq!(&vec, &sapling_generators.wprb);
    }

    {
        let mut vec = Vec::new();
        let asset_type = AssetType::<Bls12>::new(b"default", &JUBJUB);
        let p = asset_type.asset_generator(&JUBJUB);
        p.write(&mut vec).unwrap();
        assert_eq!(&vec, &sapling_generators.vcvb);
    }

    {
        let mut vec = Vec::new();
        let p = JUBJUB.generator(FixedGenerators::ValueCommitmentRandomness);
        p.write(&mut vec).unwrap();
        assert_eq!(&vec, &sapling_generators.vcrb);
    }
}
